* Advent of Code 2021
** day 1
#+NAME: day1-input
#+BEGIN_SRC emacs-lisp :session "day1"
(defconst advent/day1input '(119 121 129 128 130 134 138 143 113 114
      129 103 90 98 91 96 101 90 73 66 74 82 80 91 92 93 96 101
      102 115 122 114 119 120 108 104 109 135 123 133 134 133 138
      144 151 158 159 162 166 146 137 124 153 150 153 162 169 167
      169 168 162 165 138 112 111 121 122 123 130 127 135 138 136
      138 141 139 144 169 174 180 183 207 210 227 224 235 239 228
      232 231 238 250 260 262 264 267 276 277 283 284 285 283 280
      260 259 261 260 263 270 275 278 281 282 287 286 285 286 290
      298 299 291 294 295 305 310 313 287 271 272 274 276 275 290
      307 305 307 312 314 313 315 323 319 332 333 334 335 352 353
      358 359 362 352 377 374 383 391 395 397 391 399 400 402 406
      413 414 417 412 421 422 420 421 418 383 387 388 395 397 398
      401 403 415 416 419 447 449 451 467 468 479 484 487 494 519
      546 566 570 582 586 587 611 613 647 641 640 663 670 671 681
      682 683 685 688 664 676 677 678 702 703 724 734 739 742 768
      771 774 784 792 787 764 773 783 790 787 788 798 797 796 802
      810 837 839 840 841 842 845 852 853 856 855 858 862 868 869
      868 852 851 852 856 857 869 883 884 886 893 896 904 905 939
      938 945 953 962 957 956 959 961 962 963 954 960 961 965 966
      967 958 959 957 960 967 968 971 972 983 994 991 1007 1022
      1034 1043 1038 1039 1028 1034 1036 1037 1039 1049 1028 1049
      1050 1052 1053 1054 1059 1060 1066 1078 1075 1083 1084 1077
      1075 1105 1108 1111 1113 1114 1127 1124 1127 1131 1138 1128
      1123 1109 1108 1112 1116 1117 1139 1145 1152 1133 1134 1133
      1147 1148 1143 1142 1157 1163 1164 1160 1162 1167 1152 1157
      1180 1182 1187 1188 1190 1201 1196 1199 1192 1203 1207 1212
      1213 1230 1231 1233 1237 1239 1245 1241 1239 1246 1249 1247
      1251 1271 1269 1273 1281 1282 1286 1287 1288 1290 1292 1294
      1291 1289 1298 1300 1301 1289 1286 1284 1288 1290 1293 1297
      1299 1294 1298 1301 1288 1294 1305 1291 1312 1310 1309 1310
      1307 1309 1310 1312 1313 1317 1316 1301 1304 1337 1342 1341
      1346 1347 1352 1353 1340 1345 1362 1354 1364 1367 1370 1366
      1368 1369 1370 1371 1372 1368 1380 1384 1386 1406 1407 1413
      1414 1417 1418 1396 1395 1401 1398 1408 1415 1403 1402 1394
      1380 1388 1391 1398 1396 1399 1397 1402 1410 1436 1438 1443
      1449 1450 1470 1451 1448 1439 1440 1437 1439 1445 1447 1448
      1449 1456 1460 1466 1495 1497 1506 1530 1519 1521 1523 1522
      1509 1526 1537 1539 1540 1542 1540 1538 1543 1546 1522 1523
      1540 1536 1548 1550 1554 1559 1575 1576 1556 1567 1566 1583
      1575 1579 1578 1561 1564 1562 1560 1577 1591 1592 1612 1603
      1607 1600 1613 1620 1621 1620 1625 1624 1623 1642 1647 1651
      1655 1657 1662 1669 1692 1683 1690 1684 1686 1689 1683 1711
      1709 1712 1714 1715 1710 1711 1702 1703 1719 1720 1722 1734
      1748 1749 1752 1754 1760 1758 1760 1763 1780 1788 1791 1802
      1795 1793 1795 1798 1801 1788 1815 1816 1825 1850 1858 1859
      1858 1859 1860 1862 1864 1868 1865 1866 1867 1869 1876 1875
      1872 1877 1897 1911 1909 1912 1911 1913 1914 1915 1913 1910
      1912 1903 1906 1909 1912 1915 1914 1921 1940 1938 1940 1941
      1954 1955 1959 1980 1999 2000 2007 2014 2038 2036 2042 2045
      2053 2065 2066 2087 2079 2099 2091 2092 2095 2094 2096 2108
      2113 2126 2148 2164 2168 2173 2177 2185 2189 2181 2182 2172
      2171 2170 2177 2178 2180 2193 2194 2200 2181 2169 2178 2179
      2193 2195 2198 2222 2225 2214 2213 2214 2196 2224 2240 2245
      2244 2273 2274 2276 2277 2266 2261 2262 2259 2262 2263 2271
      2272 2273 2277 2276 2256 2255 2251 2253 2240 2246 2256 2257
      2298 2299 2294 2295 2300 2299 2312 2308 2318 2320 2324 2321
      2336 2352 2351 2358 2360 2337 2343 2356 2354 2344 2340 2348
      2343 2349 2350 2362 2363 2381 2380 2382 2383 2385 2395 2372
      2368 2363 2362 2363 2364 2372 2391 2382 2360 2362 2363 2389
      2393 2401 2400 2410 2404 2403 2402 2416 2424 2420 2415 2440
      2454 2457 2456 2446 2448 2453 2460 2463 2472 2473 2474 2475
      2474 2471 2472 2481 2503 2475 2477 2485 2491 2506 2507 2504
      2506 2518 2508 2507 2521 2524 2511 2533 2545 2555 2563 2564
      2567 2558 2561 2588 2568 2566 2575 2590 2588 2589 2598 2590
      2601 2607 2606 2616 2624 2615 2621 2628 2627 2634 2650 2667
      2671 2686 2687 2692 2712 2716 2717 2715 2717 2718 2720 2721
      2738 2733 2730 2734 2742 2747 2748 2755 2767 2761 2778 2772
      2773 2780 2783 2784 2779 2790 2782 2787 2786 2793 2797 2806
      2807 2809 2808 2809 2810 2811 2807 2808 2804 2815 2848 2850
      2867 2849 2872 2873 2874 2883 2885 2894 2895 2914 2917 2910
      2895 2896 2899 2877 2883 2880 2890 2918 2921 2923 2928 2926
      2925 2932 2919 2921 2928 2929 2935 2936 2918 2921 2935 2937
      2946 2948 2936 2934 2949 2944 2940 2941 2945 2985 2986 2987
      2990 3001 3008 3010 3021 3023 3022 3025 3029 3030 3033 3012
      3020 3008 3011 3006 2999 2998 3007 3008 3009 3010 3012 3018
      3025 3050 3049 3063 3068 3064 3070 3071 3069 3076 3082 3095
      3103 3105 3107 3108 3113 3110 3111 3102 3103 3107 3140 3164
      3162 3163 3166 3168 3164 3163 3173 3190 3195 3196 3202 3204
      3218 3228 3227 3247 3249 3251 3260 3247 3258 3265 3266 3290
      3306 3298 3301 3302 3303 3289 3302 3298 3299 3302 3300 3289
      3288 3285 3286 3320 3329 3338 3328 3324 3334 3329 3333 3334
      3336 3338 3341 3324 3331 3329 3330 3347 3373 3380 3383 3382
      3385 3372 3379 3369 3370 3381 3390 3391 3392 3393 3402 3414
      3435 3459 3454 3456 3453 3460 3472 3473 3472 3473 3482 3483
      3486 3495 3521 3534 3535 3536 3539 3573 3568 3575 3571 3573
      3588 3575 3576 3578 3579 3577 3582 3603 3606 3607 3609 3622
      3629 3648 3656 3655 3658 3657 3644 3643 3610 3605 3606 3607
      3609 3607 3580 3571 3570 3573 3580 3581 3563 3566 3575 3567
      3566 3568 3570 3572 3590 3584 3578 3572 3571 3576 3571 3578
      3545 3534 3543 3549 3551 3556 3557 3571 3576 3565 3563 3562
      3568 3569 3571 3572 3573 3574 3576 3577 3584 3564 3577 3583
      3584 3593 3599 3610 3613 3622 3635 3639 3646 3643 3606 3599
      3602 3604 3617 3618 3626 3647 3635 3655 3657 3658 3657 3656
      3655 3648 3650 3651 3655 3659 3661 3671 3665 3668 3674 3671
      3667 3668 3665 3667 3665 3667 3669 3668 3677 3683 3684 3689
      3709 3717 3711 3710 3713 3721 3736 3734 3736 3740 3746 3754
      3753 3754 3768 3796 3780 3762 3765 3767 3773 3800 3806 3823
      3827 3828 3841 3848 3850 3853 3855 3845 3847 3854 3864 3849
      3857 3841 3850 3851 3856 3854 3861 3858 3861 3871 3878 3887
      3881 3882 3883 3885 3882 3885 3900 3905 3903 3906 3910 3940
      3925 3926 3950 3951 3952 3954 3965 3962 3963 3957 3944 3953
      3957 3964 3965 3973 3983 3989 3991 4010 4009 3997 3999 4006
      4008 4009 4010 4006 4018 4020 4028 4003 4004 4013 4018 4024
      4037 4039 4036 4041 4040 4036 4038 4039 4040 4044 4045 4075
      4092 4088 4086 4083 4086 4087 4096 4088 4089 4080 4085 4088
      4087 4090 4088 4094 4107 4106 4107 4115 4121 4136 4153 4161
      4163 4170 4173 4169 4172 4174 4180 4166 4183 4188 4198 4207
      4220 4221 4225 4242 4224 4228 4226 4227 4225 4233 4242 4252
      4249 4250 4215 4216 4217 4236 4245 4246 4248 4249 4250 4251
      4254 4252 4254 4257 4268 4272 4273 4278 4282 4290 4298 4303
      4307 4285 4286 4290 4289 4283 4285 4286 4313 4322 4327 4329
      4330 4333 4335 4334 4309 4314 4316 4320 4335 4339 4348 4347
      4362 4358 4361 4350 4349 4356 4358 4359 4370 4383 4387 4378
      4383 4380 4379 4395 4387 4394 4381 4385 4386 4390 4389 4394
      4396 4410 4412 4407 4408 4416 4417 4421 4428 4423 4420 4422
      4421 4425 4426 4423 4437 4438 4440 4441 4446 4451 4456 4451
      4455 4470 4493 4494 4486 4489 4500 4501 4485 4496 4499 4505
      4507 4500 4516 4518 4535 4532 4544 4541 4562 4564 4550 4551
      4553 4584 4588 4598 4599 4608 4623 4621 4628 4650 4655 4657
      4658 4653 4658 4670 4685 4686 4714 4708 4709 4710 4718 4720
      4719 4738 4730 4719 4722 4736 4737 4739 4750 4751 4754 4755
      4758 4759 4764 4767 4774 4770 4768 4773 4760 4763 4762 4764
      4765 4767 4778 4777 4795 4792 4793 4796 4797 4800 4779 4782
      4794 4795 4785 4786 4788 4789 4798 4800 4802 4803 4814 4831
      4830 4849 4852 4854 4860 4861 4860 4862 4860 4834 4835 4858
      4859 4863 4864 4873 4874 4875 4880 4881 4882 4902 4899 4900
      4904 4903 4900 4916 4917 4921 4924 4910 4917 4918 4919 4920
      4910 4913 4932 4941 4959 4976 4978 5000 4999 4982 4973 4977
      5002 5000 5001 5000 5003 5004 5005 5015 5004 4994 4992 4982
      4991 4993 4996 4994 5000 5004 5013 5038 5054 5062 5051 5054
      5044 5020 5008 5030 5033 5007 5004 5005 5012 5022 5032 5035
      5040 5042 5059 5058 5088 5096 5099 5107 5126 5137 5134 5148
      5151 5150 5152 5158 5163 5167 5166 5150 5149 5132 5136 5149
      5150 5157 5145 5165 5163 5171 5168 5177 5174 5142 5145 5160
      5180 5202 5222 5226 5239 5240 5261 5262 5263 5274 5276 5277
      5285 5286 5284 5296 5324 5303 5313 5314 5324 5339 5340 5343
      5344 5343 5344 5356 5345 5344 5345 5343 5350 5353 5355 5358
      5359 5363 5364 5368 5370 5397 5398 5393 5394 5395 5401 5408
      5417 5418 5419 5422 5424 5430 5433 5435 5439 5447 5449 5448
      5466 5457 5461 5473 5477 5478 5480 5481 5480 5498 5511 5536
      5543 5544 5556 5557 5594 5601 5582 5583 5584 5593 5611 5614
      5613 5626 5624 5614 5610 5611 5605 5608 5609 5611 5632 5637
      5639 5667 5682 5685 5686 5687 5688 5690 5670 5673 5674 5680
      5673 5674 5694 5704 5698 5702 5703 5696 5697 5695 5728 5733
      5735 5739 5727 5728 5732 5733 5732 5741 5754 5755 5757 5733
      5734 5735 5737 5738 5750 5773 5775 5787 5800 5818 5819 5820
      5826 5830 5831 5833 5841 5832 5835 5839 5840 5835 5836 5841
      5838 5841 5837 5843 5842 5837 5843 5845 5846 5884 5888 5891
      5893 5924 5934 5939 5940 5907 5888 5889 5892 5893 5884 5898
      5900 5901 5884 5893 5894 5895 5909 5911 5915 5918 5922 5931
      5935 5939 5934 5944 5943 5965 5967 5970 5971 5941 5942 5943
      5942 5943 5946 5945 5923 5918 5921 5931 5940 5915 5931 5930
      5937 5909 5908 5911 5909 5912 5911 5912 5910 5921 5929 5931
      5929 5925 5907 5909 5910 5913 5910 5908 5921 5927 5943 5941
      5971 5972 5977 5979 5984 6002 6007 6009 6010 6011 6026 6034
      6027 6026 6035 6033 6032 6033 6034 6040 6042 6045 6044 6052
      6053 6043 6036 6024 6026 6033 6034 6037 6040 6048 6069 6072
      6076 6074 6081 6080 6078 6089 6092 6090 6091 6096 6107 6109
      6108 6113 6138 6120 6122 6112 6122 6119 6129 6123 6124 6135
      6136 6157 6159 6161 6162 6161 6179 6180 6187 6188 6189 6193
      6196 6195 6192 6195 6197 6196 6197 6199 6200 6198 6214 6216
      6217 6218 6217 6236 6239 6209 6214 6208 6210 6212 6217))

(defconst advent/day1test '(199 200 208 210 200 207 240 269 260 263))
#+END_SRC

#+NAME: day1-solution
#+BEGIN_SRC emacs-lisp :session "day1"
(setq advent/day1result ())

(defun advent/find-ascending (list)
  "Find ascending elements.
Find in LIST how many elements are larger from their previous
element."
  (let ((value 0))
    (while list
      (if (> (length list) 1)
          (if (< (car list) (cadr list))
              (setq value (+ 1 value))
            )
        )
      (setq list (cdr list)))
    value))

(advent/find-ascending advent/day1test) ;; correct 7

(setq advent/day1result
      (cons (advent/find-ascending advent/day1input) advent/day1result))

(defun advent/find-sum-ascending (list)
  "Find ascending sums.
Find in LIST how many times a three element window sum is
larger than the previous one."
  (let ((value 0))
    (while (> (length list) 3)
      (if (< (+ (car list) (cadr list) (caddr list))
             (+ (cadr list) (caddr list) (cadddr list)))
          (setq value (+ 1 value)))
      (setq list (cdr list)))
    value))

(advent/find-sum-ascending advent/day1test) ;; correct 5

(setq advent/day1result
      (reverse
       (cons (advent/find-sum-ascending advent/day1input) advent/day1result)))

advent/day1result
#+END_SRC

#+RESULTS: day1-solution
| 1475 | 1516 |

** day 2
#+NAME: day2-input
#+BEGIN_SRC emacs-lisp :session "day2"
(defconst advent/day2-input '("forward" 2 "down" 9 "up" 6 "forward" 1 "down" 5
"down" 7 "down" 9 "forward" 9 "down" 8 "up" 7 "forward" 2 "up" 6 "forward" 4 "down"
5 "down" 9 "up" 1 "down" 9 "forward" 8 "forward" 6 "forward" 6 "forward" 5
"forward" 9 "up" 3 "up" 5 "forward" 1 "down" 4 "down" 7 "forward" 2 "up" 3 "down" 8
"forward" 1 "down" 2 "forward" 3 "up" 1 "up" 1 "up" 7 "forward" 5 "up" 8 "forward"
8 "forward" 8 "down" 6 "forward" 1 "forward" 5 "forward" 4 "forward" 6
"forward" 5 "down" 6 "down" 9 "forward" 9 "down" 8 "forward" 6 "down" 5 "forward"
9 "up" 3 "up" 1 "down" 8 "down" 7 "down" 9 "forward" 7 "down" 8 "down" 9 "down" 5
"down" 3 "forward" 1 "forward" 6 "down" 1 "forward" 9 "down" 5 "forward" 7 "up" 2
"down" 8 "forward" 1 "down" 4 "down" 9 "down" 4 "up" 5 "forward" 4 "forward" 6
"forward" 1 "down" 3 "forward" 1 "down" 6 "up" 5 "up" 4 "forward" 6 "forward" 1
"forward" 1 "down" 2 "up" 4 "up" 3 "up" 2 "up" 6 "down" 6 "forward" 1 "down" 8
"forward" 1 "up" 6 "forward" 7 "down" 5 "forward" 4 "forward" 6 "down" 4
"forward" 4 "down" 4 "down" 4 "forward" 2 "forward" 8 "down" 5 "down" 1 "down" 8
"up" 5 "up" 8 "down" 5 "forward" 4 "down" 6 "up" 7 "forward" 2 "down" 3 "forward" 2
"forward" 2 "down" 9 "down" 3 "up" 6 "forward" 8 "up" 2 "up" 9 "forward" 4 "down" 1
"down" 5 "forward" 4 "down" 2 "down" 3 "forward" 5 "down" 4 "forward" 7 "up" 4
"forward" 6 "up" 8 "forward" 1 "up" 9 "down" 4 "forward" 2 "down" 1 "forward" 7
"down" 3 "down" 2 "forward" 5 "down" 3 "down" 9 "down" 9 "up" 5 "forward" 2 "down"
8 "up" 9 "forward" 4 "down" 3 "forward" 3 "forward" 6 "up" 2 "forward" 3 "down" 1
"down" 1 "down" 1 "forward" 7 "forward" 4 "forward" 7 "down" 5 "down" 6 "down" 2
"forward" 6 "down" 3 "up" 6 "forward" 4 "down" 8 "up" 1 "forward" 8 "down" 2 "down"
5 "forward" 4 "down" 9 "forward" 2 "forward" 2 "down" 3 "forward" 3 "down" 1
"forward" 2 "down" 7 "forward" 3 "forward" 9 "up" 9 "forward" 6 "forward" 2
"down" 1 "down" 5 "forward" 6 "forward" 6 "down" 3 "up" 3 "forward" 9 "down" 7
"down" 2 "down" 4 "down" 7 "forward" 5 "up" 4 "forward" 8 "down" 5 "forward" 7
"down" 7 "up" 7 "down" 8 "forward" 9 "up" 5 "forward" 1 "down" 2 "forward" 5 "down"
9 "forward" 3 "down" 5 "forward" 8 "forward" 3 "up" 5 "down" 2 "up" 3 "forward" 2
"up" 1 "up" 5 "down" 8 "forward" 2 "down" 5 "up" 4 "up" 5 "up" 2 "forward" 9
"forward" 6 "down" 9 "up" 9 "forward" 6 "forward" 4 "forward" 3 "forward" 7 "up"
1 "down" 2 "down" 6 "down" 1 "forward" 8 "down" 1 "forward" 6 "down" 8 "forward"
8 "down" 7 "down" 6 "down" 5 "forward" 2 "up" 8 "up" 6 "up" 5 "down" 1 "forward" 1
"down" 1 "down" 5 "forward" 7 "forward" 3 "down" 1 "forward" 5 "forward" 5
"forward" 8 "down" 1 "up" 2 "down" 6 "up" 6 "forward" 6 "forward" 6 "down" 3
"forward" 9 "up" 4 "forward" 4 "down" 6 "up" 1 "forward" 6 "down" 2 "down" 5 "down"
2 "down" 6 "up" 5 "down" 1 "down" 1 "forward" 3 "forward" 7 "forward" 3 "up" 2
"down" 8 "down" 4 "down" 1 "down" 5 "down" 1 "down" 9 "forward" 6 "down" 6 "down" 4
"down" 6 "down" 8 "forward" 4 "down" 6 "down" 7 "forward" 8 "down" 4 "up" 4 "down"
1 "forward" 1 "forward" 4 "forward" 1 "up" 9 "down" 7 "forward" 7 "down" 4
"forward" 1 "up" 4 "forward" 4 "down" 5 "down" 7 "forward" 5 "forward" 7
"forward" 1 "forward" 1 "forward" 9 "forward" 9 "up" 3 "forward" 4 "down" 2
"forward" 9 "up" 8 "forward" 3 "up" 5 "down" 3 "down" 8 "forward" 8 "down" 6
"forward" 1 "down" 6 "down" 6 "up" 9 "down" 2 "forward" 8 "up" 9 "down" 7 "up" 9 "up"
8 "up" 1 "forward" 6 "forward" 9 "down" 2 "forward" 8 "down" 1 "up" 4 "forward" 4
"forward" 7 "up" 2 "forward" 4 "down" 5 "forward" 3 "down" 2 "down" 7 "down" 4
"down" 2 "up" 5 "down" 5 "down" 5 "down" 4 "up" 1 "forward" 7 "down" 6 "forward" 5
"forward" 1 "down" 4 "up" 9 "down" 5 "forward" 7 "forward" 5 "down" 6 "down" 3
"down" 9 "down" 1 "forward" 6 "up" 2 "down" 7 "down" 3 "down" 6 "up" 3 "down" 4
"down" 4 "forward" 9 "down" 3 "forward" 2 "down" 9 "down" 8 "up" 4 "down" 2
"forward" 2 "down" 5 "down" 4 "down" 4 "down" 2 "forward" 6 "down" 3 "forward" 1
"down" 4 "forward" 7 "down" 5 "up" 4 "down" 6 "forward" 8 "down" 6 "forward" 2
"forward" 4 "forward" 5 "forward" 7 "forward" 4 "forward" 5 "down" 8 "down" 7
"forward" 3 "forward" 5 "up" 7 "forward" 1 "down" 4 "forward" 5 "forward" 4
"forward" 4 "down" 5 "down" 8 "forward" 8 "down" 1 "down" 1 "down" 5 "up" 5
"forward" 6 "down" 6 "forward" 3 "forward" 4 "forward" 7 "forward" 4 "down" 8
"forward" 2 "down" 4 "forward" 4 "down" 1 "up" 2 "forward" 6 "up" 1 "down" 7 "down"
9 "forward" 7 "forward" 2 "up" 3 "down" 2 "down" 9 "down" 5 "up" 7 "forward" 1
"forward" 8 "down" 8 "up" 3 "down" 3 "forward" 9 "up" 4 "down" 5 "up" 5 "down" 1 "up"
8 "forward" 9 "down" 3 "up" 6 "forward" 6 "forward" 1 "down" 1 "forward" 9 "down"
8 "forward" 8 "down" 6 "up" 9 "down" 4 "up" 3 "up" 9 "forward" 2 "down" 2 "down" 2
"forward" 3 "down" 2 "forward" 5 "forward" 4 "up" 8 "forward" 9 "up" 7 "forward"
2 "down" 5 "down" 6 "forward" 8 "up" 7 "forward" 4 "forward" 3 "up" 5 "down" 8
"forward" 3 "up" 2 "down" 3 "forward" 6 "down" 9 "down" 2 "down" 6 "down" 2
"forward" 7 "forward" 5 "forward" 7 "down" 8 "forward" 2 "down" 2 "forward" 8
"up" 8 "forward" 4 "forward" 3 "up" 5 "down" 3 "forward" 3 "up" 8 "up" 7 "down" 4
"down" 1 "forward" 2 "down" 1 "up" 6 "up" 4 "down" 3 "up" 1 "forward" 7 "forward" 7
"forward" 7 "forward" 8 "down" 1 "forward" 5 "down" 6 "forward" 9 "forward" 7
"forward" 7 "down" 4 "up" 4 "down" 6 "down" 9 "up" 4 "up" 2 "up" 6 "forward" 4 "up" 4
"up" 6 "down" 2 "forward" 4 "down" 9 "forward" 9 "forward" 9 "down" 1 "forward" 7
"down" 2 "down" 7 "down" 8 "down" 8 "down" 9 "up" 9 "down" 5 "forward" 5 "forward"
7 "forward" 4 "down" 7 "forward" 8 "forward" 1 "down" 8 "up" 9 "down" 7 "forward"
9 "forward" 4 "forward" 8 "down" 9 "forward" 4 "down" 3 "forward" 3 "down" 1
"down" 1 "down" 2 "up" 5 "down" 2 "down" 1 "down" 8 "forward" 3 "up" 2 "forward" 7
"down" 3 "down" 8 "down" 1 "forward" 4 "forward" 7 "down" 5 "forward" 6 "down" 6
"down" 2 "forward" 6 "down" 3 "up" 4 "down" 7 "forward" 7 "up" 1 "up" 9 "down" 1
"down" 2 "down" 8 "down" 7 "up" 1 "forward" 7 "down" 2 "forward" 4 "forward" 6
"forward" 9 "down" 6 "forward" 2 "up" 8 "down" 2 "up" 2 "up" 5 "down" 8 "up" 6 "down"
9 "forward" 6 "down" 8 "down" 6 "down" 1 "up" 7 "up" 6 "down" 8 "forward" 2 "up" 7
"forward" 5 "forward" 7 "forward" 7 "up" 5 "forward" 2 "down" 9 "up" 2 "up" 8 "up"
2 "down" 3 "down" 7 "forward" 9 "down" 3 "up" 9 "forward" 8 "up" 8 "forward" 4
"forward" 8 "forward" 6 "up" 1 "down" 3 "up" 1 "down" 1 "forward" 2 "forward" 1
"forward" 4 "forward" 7 "up" 8 "down" 9 "up" 2 "down" 7 "forward" 4 "down" 3
"forward" 4 "forward" 2 "down" 9 "forward" 8 "forward" 5 "forward" 3 "down" 6
"forward" 4 "forward" 4 "forward" 9 "forward" 4 "up" 5 "down" 7 "up" 6 "forward"
5 "down" 5 "forward" 4 "down" 5 "forward" 7 "forward" 3 "forward" 5 "down" 5
"forward" 4 "down" 5 "up" 4 "down" 8 "up" 3 "down" 3 "up" 5 "forward" 4 "forward" 5
"down" 6 "forward" 6 "forward" 1 "forward" 8 "down" 6 "down" 9 "up" 5 "forward" 2
"forward" 8 "up" 6 "down" 6 "forward" 2 "down" 8 "forward" 7 "forward" 7 "down" 5
"forward" 5 "forward" 8 "forward" 1 "down" 4 "down" 2 "down" 5 "up" 4 "forward" 3
"forward" 5 "down" 4 "down" 7 "down" 4 "up" 9 "up" 6 "forward" 1 "down" 8 "up" 8 "up"
9 "forward" 2 "forward" 1 "down" 6 "forward" 6 "down" 4 "forward" 7 "up" 2 "up" 1
"forward" 4 "down" 1 "forward" 8 "forward" 3 "up" 7 "up" 5 "down" 1 "forward" 8
"forward" 6 "up" 6 "forward" 9 "down" 5 "down" 9 "forward" 2 "down" 3 "up" 1 "up" 7
"down" 1 "forward" 8 "up" 9 "down" 1 "down" 5 "down" 7 "down" 5 "down" 5 "down" 5
"up" 9 "forward" 9 "forward" 7 "forward" 4 "forward" 6 "down" 5 "down" 3
"forward" 9 "forward" 1 "down" 1 "down" 8 "up" 4 "down" 9 "forward" 9 "up" 1 "down"
5 "forward" 8 "up" 6 "forward" 3 "down" 6 "up" 8 "down" 7 "forward" 3 "forward" 6
"down" 7 "forward" 6 "forward" 4 "forward" 4 "down" 4 "forward" 6 "forward" 5
"down" 6 "forward" 6 "down" 7 "forward" 6 "forward" 3 "up" 4 "up" 2 "up" 6 "down" 2
"down" 8 "forward" 5 "forward" 1 "up" 4 "forward" 7 "forward" 9 "up" 6 "down" 7
"down" 3 "up" 5 "forward" 5 "down" 8 "up" 1 "down" 1 "down" 3 "down" 2 "down" 1
"forward" 5 "down" 3 "down" 5 "forward" 7 "forward" 9 "down" 3 "forward" 7
"forward" 5 "forward" 4 "forward" 2 "forward" 7 "forward" 8 "forward" 6 "down"
8 "forward" 5 "forward" 6 "forward" 6 "down" 8 "down" 2 "forward" 4 "down" 7
"forward" 6 "down" 7 "down" 4 "forward" 6 "up" 6 "forward" 4 "forward" 9
"forward" 2 "forward" 3 "forward" 1 "down" 8 "down" 3 "forward" 4 "up" 3
"forward" 7 "forward" 1 "down" 7 "down" 8 "forward" 1 "up" 8 "forward" 8 "up" 8
"down" 5 "forward" 6 "down" 8 "down" 4 "down" 9 "up" 1 "down" 3 "forward" 6 "down"
6 "forward" 7 "forward" 3 "down" 6 "down" 6 "forward" 4 "down" 4 "down" 1 "down"
8 "forward" 2 "forward" 8 "forward" 8 "down" 6 "forward" 9 "down" 9 "down" 5
"down" 5 "forward" 7 "down" 1 "forward" 1 "down" 1 "down" 6 "down" 1 "forward" 1
"up" 6 "up" 9 "forward" 5 "down" 6 "forward" 8 "forward" 6 "down" 7 "forward" 1
"forward" 4 "forward" 9 "forward" 2 "forward" 4 "down" 2 "forward" 1 "forward"
8 "down" 1 "down" 1 "forward" 4 "down" 5 "down" 3 "down" 9 "down" 2 "up" 8 "down" 7
"down" 1 "down" 9 "forward" 2 "forward" 2 "up" 3 "forward" 3 "down" 3 "forward" 5
"forward" 9 "down" 7 "up" 7 "down" 9 "forward" 3 "forward" 7 "down" 1 "forward" 8
"down" 8 "forward" 1 "down" 8 "down" 6 "forward" 2 "down" 3 "down" 1 "down" 8
"forward" 3 "up" 5 "down" 7 "up" 2 "up" 8 "forward" 5 "up" 7 "down" 6 "up" 7 "down" 9
"forward" 5 "up" 4 "forward" 9 "down" 5 "up" 7 "down" 2 "up" 2 "up" 7 "forward" 5
"down" 6 "forward" 4 "down" 4 "down" 3 "forward" 2 "up" 2 "down" 5 "forward" 8
"down" 3 "up" 7 "down" 1 "down" 7 "forward" 7 "forward"
4 "forward" 7 "down" 2
"down" 9 "down" 6 "down" 9 "down" 2 "down" 9 "down" 7 "down" 5 "forward" 4 "up" 5
"up" 7 "forward" 2 "forward" 7 "down" 3 "down" 3 "forward" 4))

(defconst advent/day2-test '("forward" 5 "down" 5 "forward" 8 "up"
3 "down" 8 "forward" 2))
#+END_SRC

#+NAME: day2-solution
#+BEGIN_SRC emacs-lisp :session "day2"
(defun advent/find-position (list)
  "Find submarine position with instructions from LIST."
  (let ((position 0)
        (depth 0)
        instruction
        value)
    (while list
      (setq instruction (pop list))
      (setq value (pop list))
      (cond
       ((equal instruction "forward")
        (setq position (+ position value)))
       ((equal instruction "down")
        (setq depth (+ depth value)))
       ((equal instruction "up")
        (setq depth (- depth value)))
       )
      )
    (* position depth)))

(advent/find-position advent/day2-test) ;; -> 150 OK

(defun advent/find-position-aim (list)
  "Find submarine position with instructions from LIST.
Now it takes into account the aim of the submarine."
  (let ((position 0)
        (depth 0)
        (aim 0))
    (while list
      (setq instruction (pop list))
      (setq value (pop list))
      (cond
       ((equal instruction "forward")
        (setq position (+ position value))
        (setq depth (+ depth (* aim value))))
       ((equal instruction "down")
        (setq aim (+ aim value)))
       ((equal instruction "up")
        (setq aim (- aim value)))
       )
      )
    (* position depth)))

(advent/find-position-aim advent/day2-test) ;; -> 900 OK

(list (advent/find-position advent/day2-input)
      (advent/find-position-aim advent/day2-input))
#+END_SRC

#+RESULTS: day2-solution
| 2070300 | 2078985210 |
** day 3
#+NAME: day3-input
#+BEGIN_SRC emacs-lisp :session day3
  (defconst advent/day3-input '( "011110011110" "101101001111"
  "000000010101" "100111001010" "110000011010" "011101010101"
  "011110001100" "010111111001" "111011100101" "011110000110"
  "010100001111" "000001001100" "110001001000" "001000100101"
  "010100011110" "010111011110" "110101001111" "011010111011"
  "000011010101" "100111011100" "010010100011" "010010011001"
  "000111010011" "111001000111" "100101111111" "011001101110"
  "110010101100" "001000010001" "110101100011" "101110001011"
  "010100000110" "001110011110" "011101100110" "001111101101"
  "000101101000" "100110000111" "000001010100" "111100010110"
  "000100100100" "001000110001" "101000001011" "101000100110"
  "110000101010" "010111110000" "111110010110" "011011111111"
  "111010100000" "100001000111" "011000001010" "011000010001"
  "101101100001" "011001101011" "111001001010" "000010110101"
  "101110100010" "001111111101" "011110001001" "000111100011"
  "010101001001" "111110111111" "111000111010" "001001111100"
  "000011000001" "011100010110" "110010000111" "000010010101"
  "110000001110" "010011111011" "001010100100" "111001010101"
  "001101000011" "110100110011" "110010100101" "001000001011"
  "111110011000" "110111011011" "110110101001" "010010100100"
  "111100001100" "100100001100" "110001111010" "111011001011"
  "010000010001" "110010100000" "010100011100" "000110001001"
  "010011000001" "111011010001" "010011111101" "111101110100"
  "110110101100" "010100111110" "100011001101" "000010000010"
  "011111100001" "100000101100" "100001110011" "100101100100"
  "000100001001" "101000000011" "110111101100" "100100101001"
  "001001101001" "000001010000" "001001111110" "111011111010"
  "001000011110" "110000100111" "010010010101" "011010001011"
  "100010010101" "010110101010" "011111001011" "110010011100"
  "111110101010" "000001111010" "111101110101" "101010110111"
  "100010101111" "000110101110" "000000010000" "000010100110"
  "111110010001" "000100110000" "110010011011" "101001000010"
  "010110000101" "100011100100" "110000110100" "110011000001"
  "101110001000" "010100011111" "111000100111" "110001100010"
  "100001101000" "101001000111" "111110100000" "000011000010"
  "110000000001" "111010000111" "100100111011" "101101110001"
  "111100110100" "100110010000" "001001001110" "100010001001"
  "101000110100" "011100001111" "001110100110" "110100001100"
  "101101001011" "000011111110" "101101010100" "000110110001"
  "011100011001" "111000111111" "011010101100" "111000100101"
  "100111011110" "011010100110" "110000101111" "110010000001"
  "100001110101" "110101011111" "111111000011" "101010010010"
  "000111111111" "000001001111" "101101010010" "111111001000"
  "001001110000" "110010011110" "110011001111" "100111101011"
  "011111000111" "110010111100" "010110000000" "110001100011"
  "111000100001" "011000101000" "100110001100" "001101011011"
  "011001111110" "011101000110" "110110111001" "110101001010"
  "111000111011" "100111010001" "100110000011" "010001000100"
  "001001001000" "010010001010" "010101101101" "001110001001"
  "101110011111" "010111001111" "110111001110" "100000101011"
  "010000111111" "101000101011" "101011010111" "000101110001"
  "100100010010" "100111011101" "111100000100" "100110000001"
  "000001000101" "101100001111" "100000101001" "010101010110"
  "000110010111" "011101001100" "000111111011" "000001100101"
  "100001011011" "111000101110" "111101100111" "011010010100"
  "101001001010" "110100110001" "111101011101" "000011101110"
  "011000100100" "101110000111" "011101110110" "111001010001"
  "011110000100" "011110001101" "100111100001" "010011100001"
  "001001101101" "001111111010" "010101000101" "011100000110"
  "100010001101" "011011101011" "110111001010" "101000010010"
  "111111100011" "000101111011" "001101010011" "100101000001"
  "101101100011" "101110010011" "011001100000" "110001111111"
  "011100101100" "010010001110" "111110101101" "010110001000"
  "000011000110" "101010011011" "000100111011" "001000111101"
  "010011111111" "011101100111" "111111011111" "001100000000"
  "101100001110" "101100001000" "100001011111" "100001000101"
  "000101011001" "010100111100" "110000111011" "010000111100"
  "011100110000" "101111110010" "100011110101" "100100110101"
  "100001100000" "101000100101" "111000001100" "010000001011"
  "110101010111" "011011001000" "100111000101" "011000000100"
  "110110011000" "101101101101" "100101110010" "001100001010"
  "010111000011" "111111100001" "100010111011" "110011001001"
  "000011011101" "001100101101" "010110011001" "111100110010"
  "011111001110" "100110001111" "000111101111" "011000110001"
  "001010001010" "000111010100" "010011110101" "011111000010"
  "000101000010" "111101011010" "110011111100" "100000001000"
  "100001000110" "101010100001" "000101000101" "100100011111"
  "110000101110" "000110000101" "001001011111" "100010011100"
  "000001110001" "110000010100" "011111010100" "001000001111"
  "000111000001" "110010001000" "001001111101" "111000001001"
  "001011000001" "111110010100" "110010001100" "010110110000"
  "011100100010" "011000101011" "001001000001" "011001001110"
  "111000010100" "000110000110" "011011000100" "011000010111"
  "110001011000" "010111011000" "000101110100" "000000011111"
  "001100111100" "000010100101" "000111110000" "000110000001"
  "000100101001" "101111110100" "010010000001" "001100010001"
  "101111001101" "111011111101" "000011110011" "111001011100"
  "010110110110" "000000001101" "010010000000" "000001010011"
  "101000010000" "101000001110" "010001000111" "111010011011"
  "101001111110" "000110101100" "100110101001" "100111111111"
  "101001101001" "110010010011" "011001011111" "111111110110"
  "101110010110" "100100001101" "010001111110" "111111101000"
  "100010100001" "011110010100" "101000110011" "010110110011"
  "011111001000" "100010100101" "110010010110" "111011001000"
  "101110001101" "000010110011" "001110100100" "100000011101"
  "011001100001" "011001101010" "001100011101" "000111101100"
  "001010001001" "111001101110" "110110001111" "001111001010"
  "001001000011" "001000010000" "000001111110" "000101101111"
  "001001000110" "100001101110" "101111011100" "111110010010"
  "010001100011" "101000100111" "001101000111" "111011110011"
  "000011000101" "111101001110" "110111111111" "011100010100"
  "110011110001" "001011011001" "000011010111" "011000001110"
  "000101010111" "110101110001" "001100001111" "110111010111"
  "110010010101" "100111100111" "101000000111" "101111000100"
  "100011100010" "000100100101" "111011110110" "001111100110"
  "011011000010" "100010010100" "010111110010" "100010110011"
  "111111111000" "011010101111" "101110111011" "101110101010"
  "001011001000" "110110001011" "110100101111" "001011001011"
  "110011010000" "000000100000" "100000110000" "101110011011"
  "100101101111" "010110100010" "000010100011" "000110110000"
  "111101000001" "011001010011" "000000001110" "000100110101"
  "111111111110" "001010101001" "001101100111" "010100000101"
  "000111001001" "101100101110" "011011110111" "011010000011"
  "000100101011" "100001100110" "000111011101" "000100011100"
  "000101100101" "011111111110" "111010111011" "100000100101"
  "011001011110" "010101100010" "010101111101" "100001000001"
  "001000100001" "010010111110" "100011001011" "011011000111"
  "110011010101" "111101100100" "001110001010" "110011111101"
  "111011011101" "001101000001" "101011011011" "100000111010"
  "010101110101" "000101011100" "011000011001" "111001010011"
  "100100010110" "111101010001" "110110011011" "011110110100"
  "101000110101" "101110111101" "011011011110" "000100110110"
  "100011011111" "111010101001" "011111011000" "101000101110"
  "110010111001" "111010000010" "110011011001" "110110010100"
  "111010011010" "000010110001" "011101100010" "110010110111"
  "010101001111" "011011001101" "101111000110" "010111010010"
  "101111011011" "100111101100" "001000001101" "010110100000"
  "001010100110" "111111000111" "100101000100" "100101001100"
  "110111010110" "101000101000" "100001001111" "110011110010"
  "111111101111" "110001111000" "010001110110" "101100000010"
  "000110000111" "001011100101" "101010100101" "110110001001"
  "000011011111" "110110101110" "101100110010" "101110101110"
  "101010110101" "000111000011" "101000011111" "001100000111"
  "101001111111" "100100011101" "111100011011" "000010111010"
  "111010101010" "101001010010" "101100010011" "010000110110"
  "011110110011" "001101110111" "110111110110" "001011000100"
  "101111100010" "011010011100" "110100001010" "100100110111"
  "000011010011" "000110111010" "001100100000" "100111011011"
  "001101101011" "101011101111" "001101100100" "111010010111"
  "100111111100" "101101000100" "000011111100" "011111001101"
  "110101001101" "011100100110" "101011000000" "100001010011"
  "011110111110" "011011100110" "110001011010" "111111110101"
  "001111111000" "100010011011" "100001101100" "110011010100"
  "100011000001" "011110111001" "010111110110" "100110001010"
  "100000000011" "001001101111" "101111011010" "010000110100"
  "101001011110" "100100011000" "101101000111" "011101001001"
  "010101110010" "000110000000" "000100111000" "010110111010"
  "110000011111" "011001011100" "010100110110" "011111110011"
  "111011011010" "001000101011" "000010110100" "011100101000"
  "111111100110" "011001110100" "000100011000" "010101010111"
  "001011101000" "001000011100" "110101101100" "010001000010"
  "001010010000" "111000110001" "101111111111" "011101011110"
  "001001111010" "001000100110" "000011011001" "100101100001"
  "110111000000" "100111011111" "111000110000" "110010111111"
  "000010010011" "100001100111" "010110100100" "001101001010"
  "101001100110" "010001110101" "001011000010" "010111110101"
  "000001001110" "010010100110" "111011001110" "101011111001"
  "000100000000" "111101001100" "100111011010" "000010010001"
  "100000010000" "101101000010" "110100010100" "111011111000"
  "101001100100" "001110101011" "000111001010" "111110000011"
  "001110100101" "101010000101" "010101010011" "110000111100"
  "101011001010" "010001011011" "010000011010" "000010101011"
  "100110110101" "100111011001" "100111010111" "000101100000"
  "101110000001" "100100001000" "010111000010" "000101001010"
  "001110010010" "111011000111" "001110110010" "111010000001"
  "011000100101" "000111100101" "100000100111" "100110011011"
  "001011100001" "101010100111" "011001111000" "000011011010"
  "001011101100" "010011011001" "000111111100" "010001011110"
  "111111011010" "111010010101" "110000010011" "001001101010"
  "000101011011" "100111111110" "110010101001" "111000011000"
  "011100101110" "011100010001" "001101110010" "101000111111"
  "101011011001" "110111000110" "001000010100" "000111000100"
  "010000101110" "001100100001" "111100000011" "111011101010"
  "000001111000" "100100010000" "110110000110" "000010111100"
  "110110110111" "010000011011" "101110000100" "011100100100"
  "010111001011" "001011010000" "000111010001" "110010111000"
  "001011011110" "000001100111" "010000101111" "110001100100"
  "111000001101" "000110011001" "010000010110" "101010001110"
  "111000111000" "011111011100" "111001110110" "111100010001"
  "110101111001" "001001010011" "010001111001" "001101101110"
  "010011000010" "000100011011" "000001101000" "001110100001"
  "100011010011" "100000011100" "011001010111" "110011011010"
  "100110001011" "011001110111" "001010001100" "000111010111"
  "110111111101" "111001101010" "001110001000" "011100001010"
  "010011101010" "111011010011" "000011001010" "100101000110"
  "100101010111" "110010100010" "010100101111" "111011011100"
  "100011100101" "101111111101" "001001110011" "110111101001"
  "100100010101" "010101100001" "100011000011" "001010010111"
  "011001001001" "110001101001" "010011100010" "111000001111"
  "010101111111" "001001001011" "000111110111" "100110111101"
  "011011110000" "001001011110" "011010101101" "111011101011"
  "010001100111" "110100001111" "100010110111" "000000010100"
  "100000010001" "010011010101" "010011100110" "100011111011"
  "110110100001" "110000100110" "110101100000" "110001101011"
  "110110100110" "101111101110" "011010101011" "101001010101"
  "110110111101" "100111100010" "101100100010" "101011101101"
  "010011010011" "001111011100" "100101010100" "101010101010"
  "010000011101" "011100000010" "100111101000" "111111010101"
  "011010101000" "001010110010" "111110010011" "110111011010"
  "010010111111" "111001100111" "010101111000" "000111110011"
  "111101000110" "001011000000" "110100100110" "101001110010"
  "101111011001" "111110000001" "011101110010" "011000010110"
  "101011010010" "100110011101" "000010011101" "001111110100"
  "110011001100" "111110111100" "011001011000" "001110000011"
  "110001001101" "111110111011" "110000000000" "010000110001"
  "000100110001" "001000101101" "001100110111" "101011001111"
  "110011110011" "010011100101" "001001000000" "011110100000"
  "001010110111" "110101111101" "001111000000" "100011011001"
  "100000001001" "000010101010" "110000100000" "111111101001"
  "111010101100" "101100110111" "110100011000" "010011000111"
  "010010001000" "001011001111" "001001001100" "100010110110"
  "111100111011" "111100101100" "000111111101" "101110000011"
  "100001011101" "111101110011" "100100000011" "111110011001"
  "100010111101" "110001001010" "111111100100" "010000110101"
  "001100001101" "001001110111" "110110101010" "011110010010"
  "101011010000" "101101110010" "010010110000" "011110100111"
  "010111000100" "010100000010" "000011110100" "111001011101"
  "010111100101" "110010101101" "011100010010" "001110111100"
  "011111110110" "001110100010" "000001100001" "011011110010"
  "000010111101" "001011111110" "111110111010" "001010101101"
  "100011110010" "001111110010" "011001110010" "100110101100"
  "010111010011" "001000010011" "111110110010" "011000000110"
  "011111111100" "000111110110" "110001110100" "101110010101"
  "010000111101" "011011101110" "011010100111" "001010000010"
  "100001100011" "110001000000" "101111100111" "101111110011"
  "001101110011" "110001110101" "100101010010" "010101011110"
  "000011111000" "000100001000" "101001110011" "011100110001"
  "000000011100" "111110010111" "101011101100" "110011101100"
  "110101011000" "010111001000" "111100001010" "001000011111"
  "010100111011" "101010101011" "001110001110" "100011000110"
  "000101101011" "110011010111" "111001011110" "111010100110"
  "010001110001" "011010101110" "101011110000" "001101010010"
  "001010000011" "011001000111" "010001000110" "010110011111"
  "001111011000" "000010010111" "100011110111" "111100111100"
  "010101010001" "100011101111" "011101011001" "001011001100"
  "001111000101" "110111011000" "011001001010" "010000000100"
  "100110111010" "000000111110" "011100100011" "100100111110"
  "000010011010" "111000000100" "001110001111" "011000101010"
  "011100110010" "110101000111" "110110111111" "101110110010"
  "000110100000" "110100001101" "000111101110" "111000111001"
  "000111111010" "010110111011" "000101110111" "111000011011"
  "010110001010" "001011111011" "100100100011" "011110110010"
  "000111110101" "110110011101" "000011000011" "110011001010"
  "000100101100" "101100100011" "010111000001" "110101100001"
  "011110111010" "111100101000" "010000100010" "110011000111"
  "010011011100" "100110101011" "000100001011" "101111000010"
  "010000010000" "111110000100" "111100011110" "010100111001"
  "100000011111" "010111110100" "100100110011" "111101111001"
  "100010011000" "111110101111" "010111001010" "110000101000"
  "001111111111" "000111100110" "000011101100" "011010001000"
  "001011010011" "110011111011" ))

  (defconst advent/day3-test '("00100" "11110" "10110" "10111" "10101"
  "01111" "00111" "11100" "10000" "11001" "00010" "01010"))


#+END_SRC

#+NAME: day3-solution
#+BEGIN_SRC emacs-lisp :session day 3
  ;;; package -- Solve the advent of code
  ;;; Commentary:
  ;;; Nothing to comment on!
  ;;; Code:
  (require 'cl-lib)
  (defun advent/find-submarine-consumption (list)
    "Find the consumption of the submarine from the LIST data.
  The data are binary numbers, in the format of strings.  I don't
  know why but using the binary format of Lisp like #b101010101
  doesn't seem to work!)"
    (let* ((bits (length (elt list 0)))
           (consumption (make-vector bits 0))
           (cutoff (/ (length list) 2))
           value)
      (while list
        (setq value (pop list))
        (dotimes (index bits)
          (if (equal (substring value index (+ index 1)) "1")
              (aset consumption index (1+ (aref consumption index)))
            )
          )
        )
      (let ((result "")
            (invers ""))
        (dotimes (index bits)
          (cond
           ((> (elt consumption index) cutoff)
            (setq result (concat result "1"))
            (setq invers (concat invers "0")))
           (t
            (setq result (concat result "0"))
            (setq invers (concat invers "1"))))
          )
        (* (string-to-number result 2) (string-to-number invers 2))
        )
      )
    )

  (defun advent/find-submarine-life-support-rating (list)
    "Find the life support rating of the submarine using the LIST."
    (let (oxygen co2)
      (let* ((bits (length (elt list 0)))
             (position 0)
             (current-list (copy-sequence list))
             ones-list
             zeros-list)
        (while (> (length current-list) 1)
          (setq ones-list
                (seq-filter (lambda (elem)
                              (equal (substring elem position (+ 1 position)) "1"))
                            current-list))
          (setq zeros-list
                (seq-filter (lambda (elet)
                              (equal (substring elet position (+ 1 position)) "0"))
                            current-list))
          (if (> (length zeros-list) (length ones-list))
              (setq current-list (copy-sequence zeros-list))
            (setq current-list (copy-sequence ones-list)))
          (setq position (+ 1 position)))
        (setq oxygen (car current-list))
        )
      (let* ((bits (length (elt list 0)))
             (position 0)
             (current-list (copy-sequence list))
             ones-list
             zeros-list)
        (while (> (length current-list) 1)
          (setq ones-list
                (seq-filter (lambda (elem)
                              (equal (substring elem position (+ 1 position)) "1"))
                            current-list))
          (setq zeros-list
                (seq-filter (lambda (elet)
                              (equal (substring elet position (+ 1 position)) "0"))
                            current-list))
          (if (< (length ones-list) (length zeros-list))
              (setq current-list (copy-sequence ones-list))
            (setq current-list (copy-sequence zeros-list)))
          (setq position (+ 1 position)))
        (setq co2 (car current-list))
        )
      (* (string-to-number oxygen 2) (string-to-number co2 2))
      )
    )
  (advent/find-submarine-life-support-rating advent/day3-input)

  ;;; adventofcode ends here
#+END_SRC

#+RESULTS: day3-solution
: 1370737
** day 4
#+NAME: day4-input
#+BEGIN_SRC emacs-lisp :session day4
  (defconst advent/day4-input-random '(67 31 58 8 79 18 19 45 38 13
  40 62 85 10 21 96 56 55 4 36 76 42 32 34 39 89 6 12 24 57 93 47
  41 52 83 61 5 37 28 15 86 23 69 92 70 27 25 53 44 80 65 22 99 43
  66 26 11 72 2 98 14 82 87 20 73 46 35 7 1 84 95 74 81 63 78 94 16
  60 29 97 91 30 17 54 68 90 71 88 77 9 64 50 0 49 48 75 3 59 51
  33))

  (defconst advent/day4-input-boards
'([12 75 58 21 87
55 80 14 63 17
37 35 76 92 56
72 68 51 19 38
91 60 34 30 88]

[ 0 66  5 51  8
45 57 31  3 62
 7 60 40 29 90
80 19 47 86 81
95 69 68 53 93]

[30 99 16 34 42
94 39 83 78 49
57 81 97 77 52
 9 61 98 11 89
85  1 60 90 55]

[87 49 12 85 88
67 89  7 35 70
37 45 93 84  9
80 58 54 13 22
 8 71 48 15 39]

[40 79 34 18 42
35  8 64  5 63
93 57 16 10 96
22 20 23  0 86
61 78 68 83 12]

[43 78 64 70 49
60 54 31 82  9
10 69  2  1 50
37 12 16 77 25
18 14 57 13 91]

[42 85 53 57 52
19 41 84 68 28
39 22 55 51 87
49 23  5 66 71
72 83 86 35 50]

[91 75  9 62 82
47 37 94  6 55
96 38  8 19 22
46 66 54 43 59
 1  0 26 36 74]

[19 78 25 10 80
23 88 95 42 11
54 85 52 92 31
73 87  9 17 93
 2 46 12 24 83]

[84 73 85 51 89
41 26 98 11 29
81  6 35 39 76
27 10 49  4 92
55 43 28 45 88]

[23  0 19 26 73
72 42 40 58 38
36 46 18 89 52
85 35 50 13  1
66 57 45 81 25]

[11 71 35  0 95
45 16 78 33 31
30 34 25 91 36
83 58  8  3 62
67 14 72 93 28]

[63 41 19 80 27
69 15 99 75 95
47 86 52 22 12
66 43 37  6 97
13  1  5 71 83]

[19 42 85 53 31
36 14 75 39 74
70 86 97 72 69
15 20 41  6 21
26 33 48 98 34]

[ 1 79 21 38 44
63 71 14 17 87
41 76 56 49 59
 3 18  6  4 77
34 19 88 24 10]

[78 20 30 54 92
25 63 81  0 69
46 87 26 56 40
90 82 50 84 66
96 41 18 29 23]

[34  1 59 55 30
97 19 82 23 77
21 52 56 48 24
29 43 28 99 69
 4 37 84 76 58]

[96 10 11 79 40
90 29 59 73 84
16 62 74 42 92
43 32 58 46 34
75 12 57 22 15]

[29 82 47 16 12
78 84 83  0 77
51 64  5 37  7
49 70 19 69  8
67 63  6 43 79]

[87 67 52 64  8
55 43 82 50 13
 3 19 94 54 83
80 59 15 32 37
 0 58 12 89 96]

[95 31 14 77 83
26 68 33 39 85
71 56 45 46 30
44 93 16 17 52
86  8 27  3 25]

[27 67 81 30 95
48 89  7  4  3
82 90 78 85 44
22 16 97 92 11
15 87 47 79 62]

[49 51 35 87 75
 3 70  8 43  5
77 88 73 81 29
42 62 50 37 85
26 86 14 38 65]

[81  9 84  3 37
33 32  1 54 45
39 83 82 36  2
56 28 76 85 40
96 69 43 24 71]

[83 72 50 46 34
15 51 87 44 71
 8 78 10 94 11
67 40 85 93 35
17 23 24  0 61]

[62 55 47 77 95
81 20 35  8 78
 7  9 89 27 51
80 39 33 63 50
67 34  4 87 57]

[72 88 74 46 91
67 66 32  0  9
 3 69 94  6 81
40 95 29 83 20
80 68 55 54  2]

[72 68 65 91 81
52 34 88 46 48
66  4 54 27 62
83 60 69 26 56
19 11 35 22 84]

[72 69 92 87 83
55 95 85 66  1
16  3 86  5 99
24 22 29 53 90
76 73 48 80 42]

[38 22 94 50 20
40 52 61 39 62
 7 35 95 54 66
37 59 84 76  2
81 85  0 48  6]

[90 95 34 93  8
46 13  6 58 85
91 89 83 80 18
56 57 44 99 17
21 42 12 74 38]

[28 61 78 99 23
75 64 37 66 50
53 70 89 17 63
43 38 71 26 85
 4 13  2 27 18]

[35 12 60  7 29
87 65 17 81 10
42 62 99 38 51
 2 57 92 27 89
82 58 97 36 72]

[43 45  5 99 51
88  4 13 39 95
44 56 31 33 94
37 57 12  3 91
50 74  6 76 30]

[67 85 56 69 84
74 65 61 66  8
43 50 55 25 97
78 15 49 73 27
71 44 93 23 64]

[83 38 97 85 76
55 90 46 34 12
 1 52 18 59 48
62 63 30 82 92
68 95  0 72 84]

[40 10 62 77 75
93 94 32 27 60
26 12 14 35 57
88 53 97 95 24
66 46 33  3 63]

[25 44 90 34 17
91 93 42 37 86
95 41 82 92 31
65 35 52 40 84
85 57 71 19 29]

[77 38 15 12  9
65 78 39 81 33
35 64 96 76 71
68 93 79 22 40
88 87 27  7 29]

[10 81  7 92 64
60 25 11  6 87
34 49 20 13  0
48 38 14 61 75
71 86 39 37 22]

[63 67 82 98 18
11 95  4 55 44
42 10 84 73 19
17 57 53 61 49
 7 32 24 75 58]

[50 90  1 98 41
77  4 87 69 19
48 44 68 10 17
96 66 71 61 45
18 86 26 73 16]

[ 5 58 68 34 85
44 89 72 21 27
 0 50 39 94 82
23 13 41 81  6
83 60 61 22 40]

[59 41 63 92 69
10 58 29 60  4
76 15 46 34 85
13 17 88 86 24
62 73 19 67 98]

[96 69 70 87 80
28 27 40 77  9
23 52 99  3 60
81 53 26 45 35
82 33 71 43 67]

[30  8 41 71 26
97 96  0 45 11
61 12 91  7 50
22 40 74 55 29
53 78 43 15  5]

[93 25 12 62 84
95 31 87 83 23
29 41  6 55 17
33 85 42 20 56
57  1 65 45 16]

[76 86 27 75 96
56 63 45 25 77
54 44 64 41 13
60 46 66 12 67
84 59 39 24  5]

[79 39 22 84 66
76 38 99 21 47
52 73  7 45 94
70 78 24 16 40
48 57  9 13 64]

[17 80 28 51 94
52 56 24 65 82
38 96 21 70 23
60 50 40 32 91
45 77 37 44 89]

[18  3 42 68 66
22 35 95 29 65
 8 99 72 19  5
44 80 11 60 76
59 90 64 57 94]

[66 97 62 49 89
 4 41  5  2 23
54 48 43 45 76
68 35 14  1 86
34 47 26 92 95]

[57 36 52 42 11
49 83 94 72 26
91 48 50 88 80
70 23 81 33 15
64 90  2 47 18]

[68 11 16 77 28
29 56 81 21 63
 2 88 54 82 40
69 93 92 55 70
57 51 25 80  3]

[10 73  8 27 61
74 66 47 54  1
52 17 76  5 20
70 44 92 59 34
26 16 11 81 46]

[10 31 95 17 44
76 67 19 69 33
36 70 25 71 99
56 42 53 46 40
90 85 81  6 26]

[17 32 74 57 64
37 82 92 54 59
56 87 41 68 73
44 98 58 95 53
47 29 71 52 31]

[19 58 84 14 91
75 89 18 67  3
11  5  2 24 37
62 35 48 56 81
54 77 16 70 45]

[ 7 20 41 87 74
17 47 45 96 49
 4 33 89 31 77
79 42 52 29 85
88 27 63 11 75]

[61 87 90 15 17
22 82 28 21 93
65 98 12 23 24
73 70 42  1 94
83 79  5 18 55]

[78 67 22 88 18
 2 43 14 56 92
61 32 87 20  8
28 11  7 12 70
21 72 36 74 77]

[27  6 97 66  7
30 67 12 70 40
18 61 78 36 23
44 24 85 74 82
55 42 51 90 34]

[98  9 39 42 44
50 54 43 66 57
85 58 91 13 11
67  5 23 59 70
45 41 87 29 20]

[97 57 48 42 73
37 29 50 49 83
55 38 69 13 44
52 14 54 94 56
24 77 16 39 66]

[31 61 44 38 80
11  3  0 56  8
94 81  1 25 19
71 23 36 66 41
70 35 77 79 46]

[17 96 13 25 48
65 28 41 24 81
39 87 74 42  5
36 35 21 60 40
 3 83 11  1 34]

[50 52 84 38 57
15 20 26  3 72
48 85  4 88 63
39 34 32 42  7
86 77 71 94 23]

[28 60 13 25  0
22 74 20 75 30
97  5 21  2 73
 7 44 14 77 16
43 68 76 24  1]

[99 85  4 62 67
46 86 43 45 77
42 21 81 47 57
71 35 23 10 29
58 60 79 61 48]

[33 10  7 61 17
97 91 70 75 48
81 80 78 34 36
26 55 73 77 14
85 84 62  9 16]

[17 41  3 82 86
58  0 51 79 29
60 70 61 95 46
98 85  1 72 93
 4 42 89 88 84]

[95 16 26 32 29
27 37 51 23 55
36 10 50 70 57
60 79 96 40  9
 3 43 74 94 31]

[15 56 51 72 62
 8 63 23 90 67
93 85 28 70 82
33 65 89  4 64
19 58 37 88 75]

[34 71 60 84 85
64 87 92 67  8
42 58  4  9 75
49 95 26 91 12
27 56 74 90 20]

[13 46 27 12 97
90 25 87 73 41
50 66 34 15 94
45 99 88 86 21
56 37 62 44 29]

[77 31 59 94 74
19 15 11 23 68
 0 36  2 98 30
44 49 90 83  9
13 88 69 66 81]

[31 71 58 11 47
42 41 10 83 21
38  9 51 17 64
37 13 93 81 39
33 22 98 26 43]

[60 89 20 94  2
45 34 93 15 30
 4 16 49 92 28
67 75 27 61 70
25 84 55 91 88]

[85 22 41 43  0
21 77 12 64 34
30 39 97 36 72
56  8 65 82 84
76  3  4 17 49]

[16 61 63 41 47
48 46 37 70 87
57 31 36 83  1
71  3 93 24 80
51 78 91 17 86]

[87 72 70 97 58
54 16  1 43 46
49 28 59 38 51
24 15 10 84 94
76 86 55 83 26]

[93 10  5  1 92
99  6 45 79 76
74 87 47 25 24
50 43  4 21 67
81 39 49 12 86]

[49 35 22 27 37
90 80 68 52 59
78 53 23 65 46
30 61 75 97 31
 1 76 66 26 48]

[37 11 88 20 99
45 96 95 81 39
60 55 80 58 53
 6 23  8  1 46
98 89 16 73 78]

[ 0 58 88 69 66
82  9 31 97 55
22 37 90 79 14
44 45 49 43 60
93 62 36 57 30]

[ 1 34 89 90 46
81 26  5  6 14
75 74 62 55 37
96 58 78 93 73
35 40 13 95 45]

[22 57 46 99 42
65 39 38  7 81
 4  1 76 59  8
84 60 37 55 40
49 31  5 80 30]

[29  4 96 50 24
61 77 70 88 93
12 64 52 25 90
67 34 59 95 16
79 21 82  6 63]

[26 41 52 91 57
92 95 33  1 62
45 31 87 29 59
44 86 99 81  5
36 20 58 73 30]

[55 96 28 26 17
62 51 64 43 49
37 41 36 75 42
11 94 87 27 63
35 23 21 29  4]

[99 54 74 83 92
27 53 15  8 85
94 36 63 29 91
58 10 45 38 79
 9 95 23 98 33]

[52 14 99 30 50
29 81 41 28 15
43 51 61 56 62
68 67 93 45 13
23  6 70  8  7]

[73 78 47  2  7
45 16 46 65 21
60 54 43 12  1
20 23 42 56 81
89 80 52 26 32]

[79  5 10 11  7
87 36  2 70 16
99 44 49 43 19
46 25  1 18 78
55 76  3 73 15]

[18 49 71 59 90
97 37 23 68 62
48  8 14 81 26
88  4 22 76 12
60 99 64 17 46]

[99 25 79 42 33
 5 28 38 15 11
 8 78 51 40 65
47  0 12 48 67
14 98 53 43 86]

[74 46 42 86 44
83 96 61 38 70
97  7 49  9 22
65 34 66 90 51
 0 36 13 85 53]

[43 21 64 86 20
 8 55 85 48 15
58 49 87 29 35
74  4 37 12 99
98 69 75 39 71]

[58 65 63 41 87
19 49 91 34 37
95 10 55 94 82
78 71 66 60 96
27 11 29 48 72]

[ 9 78 51 18 93
71 55  0  5 37
24 98  2 70 92
85 15 46 91 99
60 68 41 86 96]))

  (defconst advent/day4-test-random '( 7 4 9 5 11 17 23 2 0 14 21
                                      24 10 16 13 6 15 25 12 22 18
                                      20 8 19 3 26 1))

  (defconst advent/day4-test-boards '( [22 13 17 11 0 8 2 23 4 24
                                      21 9 14 16 7 6 10 3 18 5 1 12
                                      20 15 19]

                                      [ 3 15 0 2 22 9 18 13 17 5 19
                                           8 7 25 23 20 11 10 24 4
                                           14 21 16 12 6]

                                      [ 14 21 17 24 4 10 16 15 9 19
                                           18 8 23 26 20 22 11 13 6
                                           5 2 0 12 3 7] ))
#+END_SRC

#+RESULTS: day4-input
: advent/day4-test-boards

#+NAME: day4-solution
#+BEGIN_SRC emacs-lisp :session day4 :lexical yes
  ;;; advent/day4 --- Solution of day 4 in Adventofcode
  ;;; Commentary:
  ;; Just the code
  ;;; Code:
  (require 'generator)
  (require 'cl-lib)

  (iter-defun advent/bingo-numbers (numbers)
    (dolist (number numbers)
      (iter-yield number)))

  (defun advent/play-bingo (numbers inboards)
    "Play bingo with NUMBERS and INBOARDS, in advent of code."
    (let* ((number (advent/bingo-numbers numbers))
           (boards (mapcar #'copy-sequence inboards))
           (hit nil)
           (bingo nil)
           draw)
      (while (not bingo)
        (setq draw (iter-next number))
        (dolist (board boards)
          (setq hit (seq-position board draw))
          (if hit
              (progn
                (aset board hit (+ 100 (aref board hit)))
                (block checkrow
                  (let ((start (* 5 (/ hit 5))))
                    (dotimes (i 5)
                      (if (< (aref board (+ start i)) 100)
                          (return-from checkrow)))
                    (setq bingo (advent/compute-bingo draw board))
                    ))
                (block checkcolumn
                  (let ((start (mod hit 5)))
                    (dotimes (i 5)
                      (if (< (aref board (+ start (* i 5))) 100)
                          (return-from checkcolumn)))
                    (setq bingo (advent/compute-bingo draw board))))))))
      bingo))

  (defun advent/play-last-bingo (numbers inboards)
    "Play bingo with NUMBERS and INBOARDS, in advent of code."
    (let* ((number (advent/bingo-numbers numbers))
           (boards (mapcar #'copy-sequence inboards))
           (hit nil)
           (bingo nil)
           draw)
      (while (> (length boards) 1)
        (setq draw (iter-next number))
        (dolist (board boards)
          (setq hit (seq-position board draw))
          (if hit
              (progn
                (aset board hit (+ 100 (aref board hit)))))
          )
        (dolist (board boards)
          (setq hit (seq-position board (+ draw 100)))
          (if hit
              (progn
                (block checkrow
                  (let ((start (* 5 (/ hit 5))))
                    (dotimes (i 5)
                      (if (< (aref board (+ start i)) 100)
                          (return-from checkrow)))
                    (delete board boards)))
                (block checkcolumn
                  (let ((start (mod hit 5)))
                    (dotimes (i 5)
                      (if (< (aref board (+ start (* i 5))) 100)
                          (return-from checkcolumn)))
                    (delete board boards)))))))
      (print draw (get-buffer "output"))
      (print boards (get-buffer "output"))
      (advent/play-bingo advent/day4-input-random boards)))

  (defun advent/compute-bingo (draw board)
    "Compute the bingo score of BOARD with the last DRAW."
    (* draw
       (seq-reduce
        #'+
        (seq-filter (lambda (element) (< element 100)) board)
        0)))

  (advent/play-last-bingo advent/day4-input-random advent/day4-input-boards)
  ;;; advent/day4 ends here
#+END_SRC

#+RESULTS: day4-solution
: 11088
